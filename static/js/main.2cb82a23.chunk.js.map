{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/FilterForm/FilterForm.styled.jsx","components/FilterForm/FilterForm.jsx","components/Phonebook/Phonebook.styled.jsx","components/Phonebook/Phonebook.jsx","App.js","index.js"],"names":["ContactFromContainer","ContactMainForm","ContactFormNameLabel","ContactFromNameInput","ContactFormNumberLabel","ContactFromNumberInput","ContactFromMainButton","ContactFromTitle","ContactForm","pushHandleName","handleName","henleDobleNameAndNumber","handleNumber","nameValue","numberValue","idFormInputName","uuidv4","idFormInputNumber","onSubmit","htmlFor","type","name","pattern","title","required","value","onChange","id","ContactCtalog","ContactListItem","ContactListDeleteButton","ContactList","contactsState","filterState","deleteContact","filter","contacts","number","toLowerCase","includes","map","index","onClick","FilterInput","FilterForm","handleNameFilter","SectionContainer","PhonebookMainTitle","PhonebookSecondaryTitle","ContactsAndFilterContainer","ContainerPhonebookWithoutMainTitle","Phonebook","useState","setContacts","setFilter","setName","setNumber","useEffect","contactsParse","JSON","parse","localStorage","getItem","setItem","stringify","e","preventDefault","some","contact","toast","error","success","target","contactId","position","toastOptions","iconTheme","primary","secondary","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb82a23.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\nexport const ContactFromContainer = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n`;\nexport const ContactMainForm = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  border: 1px dashed tomato;\n  padding: 10px;\n  margin: 10px;\n`;\nexport const ContactFormNameLabel = styled.label``;\nexport const ContactFromNameInput = styled.input`\n  caret-color: tomato;\n  margin: 10px;\n`;\nexport const ContactFormNumberLabel = styled.label``;\nexport const ContactFromNumberInput = styled.input`\n  caret-color: tomato;\n  margin: 10px;\n`;\nexport const ContactFromMainButton = styled.button``;\nexport const ContactFromTitle = styled.h2`\n  color: tomato;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n  ContactFromContainer,\n  ContactMainForm,\n  ContactFormNameLabel,\n  ContactFromNameInput,\n  ContactFormNumberLabel,\n  ContactFromNumberInput,\n  ContactFromMainButton,\n  ContactFromTitle,\n} from \"./ContactForm.styled\";\n\nconst ContactForm = ({\n  pushHandleName,\n  henleDobleNameAndNumber,\n  handleName,\n  handleNumber,\n  nameValue,\n  numberValue,\n}) => {\n  const idFormInputName = uuidv4();\n  const idFormInputNumber = uuidv4();\n\n  return (\n    <ContactFromContainer>\n      <ContactFromTitle>Add contact</ContactFromTitle>\n      <ContactMainForm onSubmit={pushHandleName}>\n        <ContactFormNameLabel htmlFor={idFormInputName}>\n          Name\n        </ContactFormNameLabel>\n        <ContactFromNameInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={nameValue}\n          onChange={handleName}\n          id={idFormInputName}\n        />\n\n        <ContactFormNumberLabel htmlFor={idFormInputNumber}>\n          Number\n        </ContactFormNumberLabel>\n        <ContactFromNumberInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={numberValue}\n          id={idFormInputNumber}\n          onChange={handleNumber}\n        />\n        <ContactFromMainButton type=\"submit\">Add contact</ContactFromMainButton>\n      </ContactMainForm>\n    </ContactFromContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const ContactCtalog = styled.ul`\n  padding: 5px;\n`;\nexport const ContactListItem = styled.li`\n  width: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border: 1px solid black;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\nexport const ContactListDeleteButton = styled.button`\n  margin: 0 5px;\n`;\n","import React from \"react\";\nimport {\n  ContactCtalog,\n  ContactListItem,\n  ContactListDeleteButton,\n} from \"./ContactList.styled\";\n\nconst ContactList = ({ contactsState, filterState, deleteContact }) => {\n  return (\n    <ContactCtalog>\n      {contactsState\n        .filter(\n          (contacts) =>\n            filterState === \"\" ||\n            contacts.number.toLowerCase().includes(filterState.toLowerCase()) ||\n            contacts.name.toLowerCase().includes(filterState.toLowerCase())\n        )\n        .map(({ id, name, number }, index) => {\n          return (\n            <ContactListItem key={id}>\n              {name} : {number}\n              <ContactListDeleteButton onClick={() => deleteContact(id)}>\n                x\n              </ContactListDeleteButton>\n            </ContactListItem>\n          );\n        })}\n    </ContactCtalog>\n  );\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled/macro\";\nexport const FilterInput = styled.input`\n  caret-color: tomato;\n`;\n","import React from \"react\";\nimport { FilterInput } from \"./FilterForm.styled\";\n\nconst FilterForm = ({ handleNameFilter }) => {\n  return <FilterInput onChange={handleNameFilter} type=\"text\" />;\n};\n\nexport default FilterForm;\n","import styled from \"@emotion/styled/macro\";\n\nexport const SectionContainer = styled.section``;\n\nexport const PhonebookMainTitle = styled.h1`\n  display: flex;\n  justify-content: center;\n\n  color: tomato;\n`;\nexport const PhonebookSecondaryTitle = styled.h2`\n  color: tomato;\n`;\nexport const ContactsAndFilterContainer = styled.div`\n  display: inline-flex;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const ContainerPhonebookWithoutMainTitle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\n","import { useState, useEffect } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport FilterForm from \"../FilterForm/FilterForm\";\nimport {\n  PhonebookMainTitle,\n  PhonebookSecondaryTitle,\n  SectionContainer,\n  ContactsAndFilterContainer,\n  ContainerPhonebookWithoutMainTitle,\n} from \"./Phonebook.styled\";\n\nconst Phonebook = () => {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n  const handleNumber = (e) => {\n    setNumber(e.target.value);\n  };\n\n  // const henleDobleNameAndNumber = (e) => {\n  //   switch (e.currentTarget.name) {\n  //     case name:\n  //       setName(e.currentTarget.value);\n  //       break;\n  //     case number:\n  //       setNumber(e.currentTarget.value);\n  //       break;\n\n  //     default:\n  //       break;\n  //   }\n  // };\n\n  useEffect(() => {\n    const contactsParse = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (contactsParse) {\n      setContacts(contactsParse);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleNameFilter = (e) => {\n    setFilter(e.target.value);\n  };\n  const deleteContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n    toast.error(\"Contact Deleted\");\n  };\n  const resetNameAndNumber = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  const pushHandleName = (e) => {\n    const id = uuidv4();\n    e.preventDefault();\n    if (contacts.some((contact) => contact.name === name)) {\n      toast.error(\"Contact is already added in the phonebook\");\n      return;\n    } else {\n      setContacts([{ id: id, name, number }, ...contacts]);\n      toast.success(\"Contact added\");\n      resetNameAndNumber();\n    }\n  };\n  return (\n    <SectionContainer>\n      <PhonebookMainTitle>Phonebook</PhonebookMainTitle>\n      <ContainerPhonebookWithoutMainTitle>\n        <ContactForm\n          pushHandleName={pushHandleName}\n          handleName={handleName}\n          handleNumber={handleNumber}\n          nameValue={name}\n          numberValue={number}\n        />\n\n        <ContactsAndFilterContainer>\n          <PhonebookSecondaryTitle>Contacts</PhonebookSecondaryTitle>\n          <FilterForm handleNameFilter={handleNameFilter} />\n          <ContactList\n            contactsState={contacts}\n            filterState={filter}\n            deleteContact={deleteContact}\n          />\n        </ContactsAndFilterContainer>\n      </ContainerPhonebookWithoutMainTitle>\n      <Toaster\n        position={\"top-right\"}\n        toastOptions={{\n          error: {\n            iconTheme: {\n              primary: \"tomato\",\n              secondary: \"white\",\n            },\n          },\n        }}\n      />\n    </SectionContainer>\n  );\n};\n\nexport default Phonebook;\n// class OldPhonebook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   henleDobleNameAndNumber = (e) => {\n//     this.setState({\n//       [e.currentTarget.name]: e.currentTarget.value,\n//     });\n//   };\n//   componentDidMount() {\n//     const contactsParse = JSON.parse(localStorage.getItem(\"contacts\"));\n//     if (contactsParse) {\n//       this.setState({\n//         contacts: contactsParse,\n//       });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   handleNameFilter = (e) => {\n//     this.setState({\n//       filter: e.target.value,\n//     });\n//   }; //+\n\n//   deleteContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId\n//       ),\n//     }));\n//     toast.error(\"Contact Deleted\");\n//   }; //+\n\n//   resetNameAndNumber = () => {\n//     this.setState({\n//       name: \"\",\n//       number: \"\",\n//     });\n//   }; //+\n\n//   pushHandleName = (e) => {\n//     const id = uuidv4();\n//     e.preventDefault();\n//     if (\n//       this.state.contacts.some((contact) => contact.name === this.state.name)\n//     ) {\n//       toast.error(\"Contact is already added in the phonebook\");\n//     } else {\n//       this.setState((prevState) => ({\n//         contacts: [\n//           { id: id, name: this.state.name, number: this.state.number },\n//           ...prevState.contacts,\n//         ],\n//       }));\n//       toast.success(\"Contact added\");\n//       this.resetNameAndNumber();\n//     }\n\n//     // this.setState((prevState) => ({\n//     //   contacts: [\n//     //     prevState.contacts.some((contact) => contact.name === this.state.name)\n//     //       ? alert(\"Такой контакт уже есть, проверьте данные\") ?? {}\n//     //       : { id: id, name: this.state.name, number: this.state.number },\n//     //     ...prevState.contacts,\n//     //   ],\n//     // }));\n//   };\n\n//   render() {\n//     return (\n//       <SectionContainer>\n//         <PhonebookMainTitle>Phonebook</PhonebookMainTitle>\n//         <ContainerPhonebookWithoutMainTitle>\n//           <ContactForm\n//             pushHandleName={this.pushHandleName}\n//             henleDobleNameAndNumber={this.henleDobleNameAndNumber}\n//             nameValue={this.state.name}\n//             numberValue={this.state.number}\n//           />\n\n//           <ContactsAndFilterContainer>\n//             <PhonebookSecondaryTitle>Contacts</PhonebookSecondaryTitle>\n//             <FilterForm handleNameFilter={this.handleNameFilter} />\n//             <ContactList\n//               contactsState={this.state.contacts}\n//               filterState={this.state.filter}\n//               deleteContact={this.deleteContact}\n//             />\n//           </ContactsAndFilterContainer>\n//         </ContainerPhonebookWithoutMainTitle>\n//         <Toaster\n//           position={\"top-right\"}\n//           toastOptions={{\n//             error: {\n//               iconTheme: {\n//                 primary: \"tomato\",\n//                 secondary: \"white\",\n//               },\n//             },\n//           }}\n//         />\n//       </SectionContainer>\n//     );\n//   }\n// }\n","import \"./App.css\";\nimport Phonebook from \"./components/Phonebook/Phonebook\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}